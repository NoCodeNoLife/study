在 JavaScript 中,数据存储只有少量方式可供选择.数据存储位置关系到访问速度.在 JavaScript 中有四种基本的数据存放位置:

	一、直接量：直接量仅仅代表自己,而不存储于特定位置. JavaScript 的直接量包括:字符串( string ),数字( number ),布尔值( boolean ),对象( object ),数组( array ),函数( function ),正则表达式( regexp ),具有特殊意义的空值,以及未定义( undefined ).

	二、变量:开发人员使用 var 关键字穿件用于存储数据值.

	三、数组:具有数字索引,存储一个 JavaScript 数组对象.

	四、对象成员:具有字符串索引,存储一个 JavaScript 对象.
	
访问数组项和对象成员的代价要高一些,具体高多少,很大程度依赖于浏览器.直接量和局部变量的访问速度要快于数组和对象成员.如果关心运行速度,那么尽量使用直接量和局部变量,限制数组和对象成员的使用.为此,有几种模式来查看避免并优化你的代码.

	一、管理作用域;
	
	二、作用域链和标识符解析;
	
	三、改变作用域链;
	
	四、动态作用域;
	
	五、闭包,作用域和内存;
	
	六、对象成员,原形以及原形链;
	
	七、嵌套成员;
	
	八、缓存对象成员的值;
	
总结:
	1.直接量和局部变量访问速度非常快,数组和对象成员需要更长时间;
	
	2.局部变量比域外变量快,因为它位于作用域链的第一个对象中.变量在作用域链中的位置越深,访问速度越慢.全局变量总是最慢的,因为它位于作用域链的最后一环.

	3.避免使用 with 表达式,因为它改变了运行期上下文的作用域链.而且应当小心对待 try-catch 表达式的 catch 子句,因为它具有同样效果.
	
	4.嵌套对象成员会造成重大性能影响,尽量少用.
	
	5.一个属性或方法在原形链中的位置越深,访问他的速度就越慢.
	
一般来说,可以通过这些方法提高 JavaScript 的代码性能: 将经常使用的对象成员,数组,和域外变量存入局部变量中.然后访问局部变量的速度回快于那些原始变量.


