代码整体结构是执行速度的决定因素之一.代码量的多少根执行的速度没关系.性能损失与代码组织方式和具体问题解决办法直接相关.

一、循环

	死循环或者长时间运行的循环会严重影响用户体验. ECMA-263标准第三版规定了 JavaScript的基本语法和行为,定义了四中类型的循环: 
	for(){}: 由4部分组成1>初始化体, 2>前侧条件, 3>后执条件, 4>循环体
	whilf(){}: while循环是一个简单的预测试循环.有一个测试条件和一个循环体组成; var i = 0; while( i<10 ){ i++ } 
	do-while(){}: do-while循环式JavaScript中唯一一种后测试的循环,它由循环体和测试条件组成. var i = 0; do{ //loop body }while( i++<10 );也就是说循环体至少运行一次后,测试条件决定循环体是否应该再次执行.
	for-in(){}:特殊用途:可以枚举任何对象的命名属性,基本格式如下: for( var prop in object ){ //loop body }
	
二、循环性能
	
	在4种循环中,最慢的是 for-in(){};在同样循环迭代中,for-in 比其他循环慢7倍.建议:除非对数目不详的对象属性进箱操作,否则避免使用 for-in 循环.出for-in循环外,其他类型循环性能相当,选择循环类型应基于需求而不是性能.
	
	如果循环类型与性能高无关,那么该怎么选择？其实只有两个因素:
		1.每次迭代干什么;
		2.迭代的次数;
	通过减少这两者中一个或者全部的执行时间,你可以积极的影响循环的整体性能.
	
	1.优化循环工作量的第一步是减少对象成员和数组项查找的次数;
	2.还可以通过改变他们的顺序提高循环性能.

三、减少迭代次数

	达夫设备:是一个循环体展开技术,在一次迭代中实际上执行了多次迭代操作.

原形,闭包,继承,cookie,语义化, ------->83页面:重绘和重排版.

